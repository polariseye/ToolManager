<#@ template language="C#" hostSpecific="true" debug="false"  #>
<#@ import namespace="System" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Xml" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Data" #>
<#@ import namespace="System.Data.Common" #>
<#@ import namespace="System.Collections" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Collections.Specialized" #>
<#@ import namespace="ToolManager.Utility.Extensions" #>
<#@ import namespace="CodeGenerate.Data" #>
<#@ import namespace="CodeGenerate.Data.SchemaObject" #>
<#@ import namespace="CodeGenerate.Data.DbSchemaProvider" #>
<#@ import namespace="CodeGenerate.Data.DbProvider" #>
<#@ import namespace="ToolManager.Utility" #>
<#@ import namespace="CodeGenerate.T4TemplateEngineHost" #>
<# 
	TableHost host = (TableHost)(Host);
	SOTable table = host.Table;
	List<SOColumn> colList = host.ColumnList;
	string nameSpace = host.GetString("NameSpace");
	string authorName = host.GetString("Author");
	if(string.IsNullOrEmpty(nameSpace))nameSpace = "Entity";

        String className = String.Format("Global{0}DAL", CSharpHostHelper.GetCamelCaseName(table.Name.Substring(2,table.Name.Length-2)));

    // 设置输出文件名
    host.OutputFileName = className + ".cs";
#>
//***********************************************************************************
// 文件名称：<#= className #>.cs
// 功能描述：<#= table.Comment == "" ? table.Name : table.Comment.Replace("\r\n"," ") #>
// 数据表：<#= table.Name #>
// 作者：<#= authorName #>
// 日期：<#= DateTime.Now.ToDateTimeString() #>
// 修改记录：
//***********************************************************************************

using System;
using System.Data;

namespace <#= nameSpace #>
{
    using MySql.Data.MySqlClient;
    using Xingji.Util;

    /// <summary>
    /// <#= table.Comment == "" ? table.Name : table.Comment.Replace("\r\n"," ") #>
    /// </summary>
    internal class <#= className#> : GameBaseDAL
    {
        #region 属性

        // 定义表的所有字段（以,  进行分隔）
        const String columns = @"<#=String.Join(", ", colList.Select(tmp=>tmp.Name))#>";

        // 定义此类所能用到的所有参数名称（以pn = ParameterName开始）；双引号内是@+字段名称
<#foreach(SOColumn item in colList) {#>
        const String pn<#=item.Name#> = "@<#=item.Name#>";
<#}#>

        //定义此类所能用到的所有sql语句（以Command结尾，表示为sql命令）
        static String getAllCommand = String.Empty;
        static String replaceCommand = String.Empty;
        static String insertCommand = String.Empty;
        static String updateCommand = String.Empty;
        static String deleteCommand = String.Empty;

        #endregion

        #region 构造函数

        /// <summary>
        /// 初始化此类所能用到的所有sql语句
        /// </summary>
        static <#= className#>()
        {
            getAllCommand = String.Format("SELECT {0} FROM `<#=table.Name#>`;", columns);
            replaceCommand = "REPLACE INTO `<#=table.Name#>` SET <#=String.Join(", ", colList.Select(tmp=>String.Format("`{0}`=@{0}", tmp.Name)))#> ;";
            insertCommand = "INSERT INTO `<#=table.Name#>` (<#=String.Join(", ", colList.Select(tmp=>String.Format("`{0}`", tmp.Name)))#>) VALUES (<#=String.Join(", ", colList.Select(tmp=>String.Format("@{0}", tmp.Name)))#>);";
            updateCommand = "UPDATE `<#=table.Name#>` SET <#=String.Join(", ", colList.Where(tmp=>!tmp.PrimaryKey).Select(tmp=>String.Format("`{0}`=@{0}", tmp.Name)))#> WHERE <#=String.Join(", ", colList.Where(tmp=>tmp.PrimaryKey).Select(tmp=>String.Format("`{0}`=@{0}", tmp.Name)))#>;";
            deleteCommand = "DELETE FROM `<#=table.Name#>` WHERE <#=String.Join(", ", colList.Where(tmp=>tmp.PrimaryKey).Select(tmp=>String.Format("`{0}`=@{0}", tmp.Name)))#>;";
        }

        #endregion

        #region 数据操作

        /// <summary>
        /// 获取所有数据
        /// </summary>
        /// <returns>数据列表</returns>
        public static DataTable GetAllList()
        {
            return ExecuteDataTable(getAllCommand);
        }

        /// <summary>
        /// 更新数据
        /// </summary>
<#foreach(SOColumn item in colList) {#>
        /// <param name="<#=item.Name.FirstLower() #>"><#=item.Comment #></param>
<#}#>
        /// <returns>受影响的行数</returns>
        public static Int32 ReplaceInfo(<#=String.Join(", ", colList.Select(tmp=>String.Format("{0} {1}",TypeUtil.DbType2CSharpTypeString(tmp.DataType), tmp.Name.FirstLower())))#>)
        {
            //构造参数
            MySqlParameter[] paramList = new MySqlParameter[]
            {
<#foreach(SOColumn item in colList) {#>
                new MySqlParameter(pn<#=item.Name#>, <#=item.Name.FirstLower()#>),
<#}#>
            };

            return ExecuteNonQuery(replaceCommand, paramList);
        }

        /// <summary>
        /// 插入数据
        /// </summary>
<#foreach(SOColumn item in colList) {#>
        /// <param name="<#=item.Name.FirstLower() #>"><#=item.Comment #></param>
<#}#>
        /// <returns>受影响的行数</returns>
        public static Int32 InsertInfo(<#=String.Join(", ", colList.Select(tmp=>String.Format("{0} {1}",TypeUtil.DbType2CSharpTypeString(tmp.DataType), tmp.Name.FirstLower())))#>)
        {
            //构造参数
            MySqlParameter[] paramList = new MySqlParameter[]
            {
<#foreach(SOColumn item in colList) {#>
                new MySqlParameter(pn<#=item.Name#>, <#=item.Name.FirstLower()#>),
<#}#>
            };

            return ExecuteNonQuery(insertCommand, paramList);
        }

        /// <summary>
        /// 更新数据
        /// </summary>
<#foreach(SOColumn item in colList) {#>
        /// <param name="<#=item.Name.FirstLower() #>"><#=item.Comment #></param>
<#}#>
        /// <returns>受影响的行数</returns>
        public static Int32 UpdateInfo(<#=String.Join(", ", colList.Select(tmp=>String.Format("{0} {1}",TypeUtil.DbType2CSharpTypeString(tmp.DataType), tmp.Name.FirstLower())))#>)
        {
            //构造参数
            MySqlParameter[] paramList = new MySqlParameter[]
            {
<#foreach(SOColumn item in colList) {#>
                new MySqlParameter(pn<#=item.Name#>, <#=item.Name.FirstLower()#>),
<#}#>
            };

            return ExecuteNonQuery(updateCommand, paramList);
        }

        /// <summary>
        /// 删除数据
        /// </summary>
<#foreach(SOColumn item in colList.Where(tmp=>tmp.PrimaryKey)) {#>
        /// <param name="<#=item.Name.FirstLower() #>"><#=item.Comment #></param>
<#}#>
        /// <returns>受影响的行数</returns>
        public static Int32 DeleteInfo(<#=String.Join(", ", colList.Where(tmp=>tmp.PrimaryKey).Select(tmp=>String.Format("{0} {1}",TypeUtil.DbType2CSharpTypeString(tmp.DataType), tmp.Name.FirstLower())))#>)
        {
            //构造参数
            MySqlParameter[] paramList = new MySqlParameter[]
            {
<#foreach(SOColumn item in colList.Where(tmp=>tmp.PrimaryKey)) {#>
                new MySqlParameter(pn<#=item.Name#>, <#=item.Name.FirstLower()#>),
<#}#>
            };

            return ExecuteNonQuery(deleteCommand, paramList);
        }

        #endregion
    }
}
