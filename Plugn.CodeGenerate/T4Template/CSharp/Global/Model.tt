<#@ template language="C#" hostSpecific="true" debug="false"  #>
<#@ import namespace="System" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Xml" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Data" #>
<#@ import namespace="System.Data.Common" #>
<#@ import namespace="System.Collections" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Collections.Specialized" #>
<#@ import namespace="ToolManager.Utility.Extensions" #>
<#@ import namespace="Plugn.CodeGenerate.Data" #>
<#@ import namespace="Plugn.CodeGenerate.Data.SchemaObject" #>
<#@ import namespace="Plugn.CodeGenerate.Data.DbSchemaProvider" #>
<#@ import namespace="Plugn.CodeGenerate.Data.DbProvider" #>
<#@ import namespace="ToolManager.Utility" #>
<#@ import namespace="Plugn.CodeGenerate.T4TemplateEngineHost" #>
<#@ output extension=".cs" #>
<# 
	TableHost host = (TableHost)(Host);
	SOTable table = host.Table;
	List<SOColumn> colList = host.ColumnList;
	string nameSpace = host.GetString("NameSpace");
	string authorName = host.GetString("Author");
	if(string.IsNullOrEmpty(nameSpace))nameSpace = "Entity";

    String className = String.Format("{0}Model", host.NameRuleConfig.FormatName(table.Name));

    // 设置输出文件名
    host.OutputFileName = className + ".cs";
#>
//***********************************************************************************
// 文件名称：<#= className #>.cs
// 功能描述：<#= table.Comment == "" ? table.Name : table.Comment.Replace("\r\n"," ") #>
// 数据表：<#= table.Name #>
// 作者：<#= authorName #>
// 日期：<#= DateTime.Now.ToDateTimeString() #>
// 修改记录：
//***********************************************************************************

using System;
using System.Data;

namespace <#= nameSpace #>
{
    /// <summary>
    /// 充值日志
    /// </summary>
    public class <#= className#>
    {
        #region 属性
<# foreach (SOColumn c in colList){ #>

        /// <summary>
        /// <#= c.Comment == "" ? c.Name : c.Comment.Replace("\r\n"," ") #>
        /// </summary>
        public <#= TypeUtil.DbType2CSharpTypeString(c.DataType) #> <#= c.Name #> { get; set; }		
<# } #>

        #endregion

        #region 构造函数

        /// <summary>
        /// 构造函数
        /// </summary>
<#foreach(SOColumn item in colList) {#>
        /// <param name="<#=item.Name.FirstLower() #>"><#=item.Comment #></param>
<#}#>
        public <#= className#>(<#=String.Join(", ", colList.Select(tmp=>String.Format("{0} {1}",TypeUtil.DbType2CSharpTypeString(tmp.DataType), tmp.Name.FirstLower())))#>)
        {
<#foreach(SOColumn item in colList) {#>
            this.<#=item.Name#> = <#=item.Name.FirstLower()#>;
<#}#>
        }

        /// <summary>
        /// 构造函数
        /// </summary>
        /// <param name="dr">DataRow</param>
        public <#= className#>(DataRow dr)
        {
<#foreach(SOColumn item in colList) {#>
            this.<#=item.Name#> = Convert.To<#=TypeUtil.DbType2CSharpTypeString(item.DataType)#>(dr[GamePropertyName.<#=item.Name#>]);
<#}#>
        }

        #endregion

        #region 方法

        /// <summary>
        /// 构造函数
        /// </summary>
<#foreach(SOColumn item in colList) {#>
        /// <param name="<#=item.Name.FirstLower() #>"><#=item.Comment #></param>
<#}#>
        public void ConstructObject(<#=String.Join(", ", colList.Select(tmp=>String.Format("{0} {1}",TypeUtil.DbType2CSharpTypeString(tmp.DataType), tmp.Name.FirstLower())))#>)
        {
<#foreach(SOColumn item in colList) {#>
            this.<#=item.Name#> = <#=item.Name.FirstLower()#>;
<#}#>
        }

        #endregion
    }
}