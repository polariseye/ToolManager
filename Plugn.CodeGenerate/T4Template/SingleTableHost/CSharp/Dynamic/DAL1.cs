// ------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行时版本: 15.0.0.0
//  
//     对此文件的更改可能导致不正确的行为，如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
// ------------------------------------------------------------------------------
namespace Plugn.CodeGenerate.T4Template.SingleTableHost.CSharp.Dynamic
{
    using System;
    using System.IO;
    using System.Xml;
    using System.Linq;
    using System.Text;
    using System.Data;
    using System.Data.Common;
    using System.Collections;
    using System.Collections.Generic;
    using System.Collections.Specialized;
    using ToolManager.Utility.Extensions;
    using Plugn.CodeGenerate.Data;
    using Plugn.CodeGenerate.Data.SchemaObject;
    using Plugn.CodeGenerate.Data.DbSchemaProvider;
    using Plugn.CodeGenerate.Data.DbProvider;
    using ToolManager.Utility;
    using Plugn.CodeGenerate.T4TemplateEngineHost;
    
    /// <summary>
    /// Class to produce the template output
    /// </summary>
    
    #line 1 "E:\testcode\csharp\ToolManager\Plugn.CodeGenerate\T4Template\SingleTableHost\CSharp\Dynamic\DAL.tt"
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "15.0.0.0")]
    public partial class DAL : DALBase
    {
#line hidden
        /// <summary>
        /// Create the template output
        /// </summary>
        public virtual string TransformText()
        {
            
            #line 19 "E:\testcode\csharp\ToolManager\Plugn.CodeGenerate\T4Template\SingleTableHost\CSharp\Dynamic\DAL.tt"
 
	TableHost host = (TableHost)(Host);
	SOTable table = host.Table;
	List<SOColumn> colList = host.ColumnList;
	string nameSpace = host.GetString("NameSpace");
	string authorName = host.GetString("Author");
	if(string.IsNullOrEmpty(nameSpace))nameSpace = "Entity";

    String className = String.Format("{0}DAL", host.FormatName(table.Name));

    // 设置输出文件名
    host.OutputFileName = className + ".cs";

            
            #line default
            #line hidden
            this.Write("//*******************************************************************************" +
                    "****\r\n// 文件名称：");
            
            #line 33 "E:\testcode\csharp\ToolManager\Plugn.CodeGenerate\T4Template\SingleTableHost\CSharp\Dynamic\DAL.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(className));
            
            #line default
            #line hidden
            this.Write(".cs\r\n// 功能描述：");
            
            #line 34 "E:\testcode\csharp\ToolManager\Plugn.CodeGenerate\T4Template\SingleTableHost\CSharp\Dynamic\DAL.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(table.Comment == "" ? table.Name : table.Comment.Replace("\r\n"," ")));
            
            #line default
            #line hidden
            this.Write("\r\n// 数据表：");
            
            #line 35 "E:\testcode\csharp\ToolManager\Plugn.CodeGenerate\T4Template\SingleTableHost\CSharp\Dynamic\DAL.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(table.Name));
            
            #line default
            #line hidden
            this.Write("\r\n// 作者：");
            
            #line 36 "E:\testcode\csharp\ToolManager\Plugn.CodeGenerate\T4Template\SingleTableHost\CSharp\Dynamic\DAL.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(authorName));
            
            #line default
            #line hidden
            this.Write("\r\n// 日期：");
            
            #line 37 "E:\testcode\csharp\ToolManager\Plugn.CodeGenerate\T4Template\SingleTableHost\CSharp\Dynamic\DAL.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(DateTime.Now.ToDateTimeString()));
            
            #line default
            #line hidden
            this.Write("\r\n// 修改记录：\r\n//*******************************************************************" +
                    "****************\r\n\r\nusing System;\r\nusing System.Data;\r\n\r\nnamespace ");
            
            #line 44 "E:\testcode\csharp\ToolManager\Plugn.CodeGenerate\T4Template\SingleTableHost\CSharp\Dynamic\DAL.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(nameSpace));
            
            #line default
            #line hidden
            this.Write("\r\n{\r\n    using MySql.Data.MySqlClient;\r\n    using Xingji.Util;\r\n\r\n    /// <summar" +
                    "y>\r\n    /// ");
            
            #line 50 "E:\testcode\csharp\ToolManager\Plugn.CodeGenerate\T4Template\SingleTableHost\CSharp\Dynamic\DAL.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(table.Comment == "" ? table.Name : table.Comment.Replace("\r\n"," ")));
            
            #line default
            #line hidden
            this.Write("\r\n    /// </summary>\r\n    internal class ");
            
            #line 52 "E:\testcode\csharp\ToolManager\Plugn.CodeGenerate\T4Template\SingleTableHost\CSharp\Dynamic\DAL.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(className));
            
            #line default
            #line hidden
            this.Write(" : GameBaseDAL\r\n    {\r\n        #region 属性\r\n\r\n        // 定义表的所有字段（以,  进行分隔）\r\n     " +
                    "   const String columns = @\"");
            
            #line 57 "E:\testcode\csharp\ToolManager\Plugn.CodeGenerate\T4Template\SingleTableHost\CSharp\Dynamic\DAL.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(String.Join(", ", colList.Select(tmp=>String.Format("`{0}`",tmp.Name)))));
            
            #line default
            #line hidden
            this.Write("\";\r\n\r\n        // 定义此类所能用到的所有参数名称（以pn = ParameterName开始）；双引号内是@+字段名称\r\n");
            
            #line 60 "E:\testcode\csharp\ToolManager\Plugn.CodeGenerate\T4Template\SingleTableHost\CSharp\Dynamic\DAL.tt"
foreach(SOColumn item in colList) {
            
            #line default
            #line hidden
            this.Write("        const String pn");
            
            #line 61 "E:\testcode\csharp\ToolManager\Plugn.CodeGenerate\T4Template\SingleTableHost\CSharp\Dynamic\DAL.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(item.Name));
            
            #line default
            #line hidden
            this.Write(" = \"@");
            
            #line 61 "E:\testcode\csharp\ToolManager\Plugn.CodeGenerate\T4Template\SingleTableHost\CSharp\Dynamic\DAL.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(item.Name));
            
            #line default
            #line hidden
            this.Write("\";\r\n");
            
            #line 62 "E:\testcode\csharp\ToolManager\Plugn.CodeGenerate\T4Template\SingleTableHost\CSharp\Dynamic\DAL.tt"
}
            
            #line default
            #line hidden
            this.Write(@"
        //定义此类所能用到的所有sql语句（以Command结尾，表示为sql命令）
        static String getAllCommand = String.Empty;
        static String replaceCommand = String.Empty;
        static String insertCommand = String.Empty;
        static String updateCommand = String.Empty;
        static String deleteCommand = String.Empty;

        #endregion

        #region 构造函数

        /// <summary>
        /// 初始化此类所能用到的所有sql语句
        /// </summary>
        static ");
            
            #line 78 "E:\testcode\csharp\ToolManager\Plugn.CodeGenerate\T4Template\SingleTableHost\CSharp\Dynamic\DAL.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(className));
            
            #line default
            #line hidden
            this.Write("()\r\n        {\r\n            getAllCommand = String.Format(\"SELECT {0} FROM `");
            
            #line 80 "E:\testcode\csharp\ToolManager\Plugn.CodeGenerate\T4Template\SingleTableHost\CSharp\Dynamic\DAL.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(table.Name));
            
            #line default
            #line hidden
            this.Write("`;\", columns);\r\n            replaceCommand = \"REPLACE INTO `");
            
            #line 81 "E:\testcode\csharp\ToolManager\Plugn.CodeGenerate\T4Template\SingleTableHost\CSharp\Dynamic\DAL.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(table.Name));
            
            #line default
            #line hidden
            this.Write("` SET ");
            
            #line 81 "E:\testcode\csharp\ToolManager\Plugn.CodeGenerate\T4Template\SingleTableHost\CSharp\Dynamic\DAL.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(String.Join(", ", colList.Select(tmp=>String.Format("`{0}`=@{0}", tmp.Name)))));
            
            #line default
            #line hidden
            this.Write(" ;\";\r\n            insertCommand = \"INSERT INTO `");
            
            #line 82 "E:\testcode\csharp\ToolManager\Plugn.CodeGenerate\T4Template\SingleTableHost\CSharp\Dynamic\DAL.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(table.Name));
            
            #line default
            #line hidden
            this.Write("` (");
            
            #line 82 "E:\testcode\csharp\ToolManager\Plugn.CodeGenerate\T4Template\SingleTableHost\CSharp\Dynamic\DAL.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(String.Join(", ", colList.Select(tmp=>String.Format("`{0}`", tmp.Name)))));
            
            #line default
            #line hidden
            this.Write(") VALUES (");
            
            #line 82 "E:\testcode\csharp\ToolManager\Plugn.CodeGenerate\T4Template\SingleTableHost\CSharp\Dynamic\DAL.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(String.Join(", ", colList.Select(tmp=>String.Format("@{0}", tmp.Name)))));
            
            #line default
            #line hidden
            this.Write(");\";\r\n            updateCommand = \"UPDATE `");
            
            #line 83 "E:\testcode\csharp\ToolManager\Plugn.CodeGenerate\T4Template\SingleTableHost\CSharp\Dynamic\DAL.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(table.Name));
            
            #line default
            #line hidden
            this.Write("` SET ");
            
            #line 83 "E:\testcode\csharp\ToolManager\Plugn.CodeGenerate\T4Template\SingleTableHost\CSharp\Dynamic\DAL.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(String.Join(", ", colList.Where(tmp=>!tmp.PrimaryKey).Select(tmp=>String.Format("`{0}`=@{0}", tmp.Name)))));
            
            #line default
            #line hidden
            this.Write(" WHERE ");
            
            #line 83 "E:\testcode\csharp\ToolManager\Plugn.CodeGenerate\T4Template\SingleTableHost\CSharp\Dynamic\DAL.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(String.Join(", ", colList.Where(tmp=>tmp.PrimaryKey).Select(tmp=>String.Format("`{0}`=@{0}", tmp.Name)))));
            
            #line default
            #line hidden
            this.Write(";\";\r\n            deleteCommand = \"DELETE FROM `");
            
            #line 84 "E:\testcode\csharp\ToolManager\Plugn.CodeGenerate\T4Template\SingleTableHost\CSharp\Dynamic\DAL.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(table.Name));
            
            #line default
            #line hidden
            this.Write("` WHERE ");
            
            #line 84 "E:\testcode\csharp\ToolManager\Plugn.CodeGenerate\T4Template\SingleTableHost\CSharp\Dynamic\DAL.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(String.Join(", ", colList.Where(tmp=>tmp.PrimaryKey).Select(tmp=>String.Format("`{0}`=@{0}", tmp.Name)))));
            
            #line default
            #line hidden
            this.Write(@";"";
        }

        #endregion

        #region 数据操作

        /// <summary>
        /// 获取所有数据
        /// </summary>
        /// <returns>数据列表</returns>
        public static DataTable GetAllList()
        {
            return ExecuteDataTable(getAllCommand);
        }

        /// <summary>
        /// 更新数据
        /// </summary>
");
            
            #line 103 "E:\testcode\csharp\ToolManager\Plugn.CodeGenerate\T4Template\SingleTableHost\CSharp\Dynamic\DAL.tt"
foreach(SOColumn item in colList) {
            
            #line default
            #line hidden
            this.Write("        /// <param name=\"");
            
            #line 104 "E:\testcode\csharp\ToolManager\Plugn.CodeGenerate\T4Template\SingleTableHost\CSharp\Dynamic\DAL.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(item.Name.FirstLower()));
            
            #line default
            #line hidden
            this.Write("\">");
            
            #line 104 "E:\testcode\csharp\ToolManager\Plugn.CodeGenerate\T4Template\SingleTableHost\CSharp\Dynamic\DAL.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(item.Comment));
            
            #line default
            #line hidden
            this.Write("</param>\r\n");
            
            #line 105 "E:\testcode\csharp\ToolManager\Plugn.CodeGenerate\T4Template\SingleTableHost\CSharp\Dynamic\DAL.tt"
}
            
            #line default
            #line hidden
            this.Write("        /// <returns>受影响的行数</returns>\r\n        public static Int32 ReplaceInfo(");
            
            #line 107 "E:\testcode\csharp\ToolManager\Plugn.CodeGenerate\T4Template\SingleTableHost\CSharp\Dynamic\DAL.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(String.Join(", ", colList.Select(tmp=>String.Format("{0} {1}",host.GetTypeString(tmp), tmp.Name.FirstLower())))));
            
            #line default
            #line hidden
            this.Write(")\r\n        {\r\n            //构造参数\r\n            MySqlParameter[] paramList = new My" +
                    "SqlParameter[]\r\n            {\r\n");
            
            #line 112 "E:\testcode\csharp\ToolManager\Plugn.CodeGenerate\T4Template\SingleTableHost\CSharp\Dynamic\DAL.tt"
foreach(SOColumn item in colList) {
            
            #line default
            #line hidden
            this.Write("                new MySqlParameter(pn");
            
            #line 113 "E:\testcode\csharp\ToolManager\Plugn.CodeGenerate\T4Template\SingleTableHost\CSharp\Dynamic\DAL.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(item.Name));
            
            #line default
            #line hidden
            this.Write(", ");
            
            #line 113 "E:\testcode\csharp\ToolManager\Plugn.CodeGenerate\T4Template\SingleTableHost\CSharp\Dynamic\DAL.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(item.Name.FirstLower()));
            
            #line default
            #line hidden
            this.Write("),\r\n");
            
            #line 114 "E:\testcode\csharp\ToolManager\Plugn.CodeGenerate\T4Template\SingleTableHost\CSharp\Dynamic\DAL.tt"
}
            
            #line default
            #line hidden
            this.Write("            };\r\n\r\n            return ExecuteNonQuery(replaceCommand, paramList);\r" +
                    "\n        }\r\n\r\n        /// <summary>\r\n        /// 插入数据\r\n        /// </summary>\r\n");
            
            #line 123 "E:\testcode\csharp\ToolManager\Plugn.CodeGenerate\T4Template\SingleTableHost\CSharp\Dynamic\DAL.tt"
foreach(SOColumn item in colList) {
            
            #line default
            #line hidden
            this.Write("        /// <param name=\"");
            
            #line 124 "E:\testcode\csharp\ToolManager\Plugn.CodeGenerate\T4Template\SingleTableHost\CSharp\Dynamic\DAL.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(item.Name.FirstLower()));
            
            #line default
            #line hidden
            this.Write("\">");
            
            #line 124 "E:\testcode\csharp\ToolManager\Plugn.CodeGenerate\T4Template\SingleTableHost\CSharp\Dynamic\DAL.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(item.Comment));
            
            #line default
            #line hidden
            this.Write("</param>\r\n");
            
            #line 125 "E:\testcode\csharp\ToolManager\Plugn.CodeGenerate\T4Template\SingleTableHost\CSharp\Dynamic\DAL.tt"
}
            
            #line default
            #line hidden
            this.Write("        /// <returns>受影响的行数</returns>\r\n        public static Int32 InsertInfo(");
            
            #line 127 "E:\testcode\csharp\ToolManager\Plugn.CodeGenerate\T4Template\SingleTableHost\CSharp\Dynamic\DAL.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(String.Join(", ", colList.Select(tmp=>String.Format("{0} {1}",host.GetTypeString(tmp), tmp.Name.FirstLower())))));
            
            #line default
            #line hidden
            this.Write(")\r\n        {\r\n            //构造参数\r\n            MySqlParameter[] paramList = new My" +
                    "SqlParameter[]\r\n            {\r\n");
            
            #line 132 "E:\testcode\csharp\ToolManager\Plugn.CodeGenerate\T4Template\SingleTableHost\CSharp\Dynamic\DAL.tt"
foreach(SOColumn item in colList) {
            
            #line default
            #line hidden
            this.Write("                new MySqlParameter(pn");
            
            #line 133 "E:\testcode\csharp\ToolManager\Plugn.CodeGenerate\T4Template\SingleTableHost\CSharp\Dynamic\DAL.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(item.Name));
            
            #line default
            #line hidden
            this.Write(", ");
            
            #line 133 "E:\testcode\csharp\ToolManager\Plugn.CodeGenerate\T4Template\SingleTableHost\CSharp\Dynamic\DAL.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(item.Name.FirstLower()));
            
            #line default
            #line hidden
            this.Write("),\r\n");
            
            #line 134 "E:\testcode\csharp\ToolManager\Plugn.CodeGenerate\T4Template\SingleTableHost\CSharp\Dynamic\DAL.tt"
}
            
            #line default
            #line hidden
            this.Write("            };\r\n\r\n            return ExecuteNonQuery(insertCommand, paramList);\r\n" +
                    "        }\r\n\r\n        /// <summary>\r\n        /// 更新数据\r\n        /// </summary>\r\n");
            
            #line 143 "E:\testcode\csharp\ToolManager\Plugn.CodeGenerate\T4Template\SingleTableHost\CSharp\Dynamic\DAL.tt"
foreach(SOColumn item in colList) {
            
            #line default
            #line hidden
            this.Write("        /// <param name=\"");
            
            #line 144 "E:\testcode\csharp\ToolManager\Plugn.CodeGenerate\T4Template\SingleTableHost\CSharp\Dynamic\DAL.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(item.Name.FirstLower()));
            
            #line default
            #line hidden
            this.Write("\">");
            
            #line 144 "E:\testcode\csharp\ToolManager\Plugn.CodeGenerate\T4Template\SingleTableHost\CSharp\Dynamic\DAL.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(item.Comment));
            
            #line default
            #line hidden
            this.Write("</param>\r\n");
            
            #line 145 "E:\testcode\csharp\ToolManager\Plugn.CodeGenerate\T4Template\SingleTableHost\CSharp\Dynamic\DAL.tt"
}
            
            #line default
            #line hidden
            this.Write("        /// <returns>受影响的行数</returns>\r\n        public static Int32 UpdateInfo(");
            
            #line 147 "E:\testcode\csharp\ToolManager\Plugn.CodeGenerate\T4Template\SingleTableHost\CSharp\Dynamic\DAL.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(String.Join(", ", colList.Select(tmp=>String.Format("{0} {1}",host.GetTypeString(tmp), tmp.Name.FirstLower())))));
            
            #line default
            #line hidden
            this.Write(")\r\n        {\r\n            //构造参数\r\n            MySqlParameter[] paramList = new My" +
                    "SqlParameter[]\r\n            {\r\n");
            
            #line 152 "E:\testcode\csharp\ToolManager\Plugn.CodeGenerate\T4Template\SingleTableHost\CSharp\Dynamic\DAL.tt"
foreach(SOColumn item in colList) {
            
            #line default
            #line hidden
            this.Write("                new MySqlParameter(pn");
            
            #line 153 "E:\testcode\csharp\ToolManager\Plugn.CodeGenerate\T4Template\SingleTableHost\CSharp\Dynamic\DAL.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(item.Name));
            
            #line default
            #line hidden
            this.Write(", ");
            
            #line 153 "E:\testcode\csharp\ToolManager\Plugn.CodeGenerate\T4Template\SingleTableHost\CSharp\Dynamic\DAL.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(item.Name.FirstLower()));
            
            #line default
            #line hidden
            this.Write("),\r\n");
            
            #line 154 "E:\testcode\csharp\ToolManager\Plugn.CodeGenerate\T4Template\SingleTableHost\CSharp\Dynamic\DAL.tt"
}
            
            #line default
            #line hidden
            this.Write("            };\r\n\r\n            return ExecuteNonQuery(updateCommand, paramList);\r\n" +
                    "        }\r\n\r\n        /// <summary>\r\n        /// 删除数据\r\n        /// </summary>\r\n");
            
            #line 163 "E:\testcode\csharp\ToolManager\Plugn.CodeGenerate\T4Template\SingleTableHost\CSharp\Dynamic\DAL.tt"
foreach(SOColumn item in colList.Where(tmp=>tmp.PrimaryKey)) {
            
            #line default
            #line hidden
            this.Write("        /// <param name=\"");
            
            #line 164 "E:\testcode\csharp\ToolManager\Plugn.CodeGenerate\T4Template\SingleTableHost\CSharp\Dynamic\DAL.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(item.Name.FirstLower()));
            
            #line default
            #line hidden
            this.Write("\">");
            
            #line 164 "E:\testcode\csharp\ToolManager\Plugn.CodeGenerate\T4Template\SingleTableHost\CSharp\Dynamic\DAL.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(item.Comment));
            
            #line default
            #line hidden
            this.Write("</param>\r\n");
            
            #line 165 "E:\testcode\csharp\ToolManager\Plugn.CodeGenerate\T4Template\SingleTableHost\CSharp\Dynamic\DAL.tt"
}
            
            #line default
            #line hidden
            this.Write("        /// <returns>受影响的行数</returns>\r\n        public static Int32 DeleteInfo(");
            
            #line 167 "E:\testcode\csharp\ToolManager\Plugn.CodeGenerate\T4Template\SingleTableHost\CSharp\Dynamic\DAL.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(String.Join(", ", colList.Where(tmp=>tmp.PrimaryKey).Select(tmp=>String.Format("{0} {1}",host.GetTypeString(tmp), tmp.Name.FirstLower())))));
            
            #line default
            #line hidden
            this.Write(")\r\n        {\r\n            //构造参数\r\n            MySqlParameter[] paramList = new My" +
                    "SqlParameter[]\r\n            {\r\n");
            
            #line 172 "E:\testcode\csharp\ToolManager\Plugn.CodeGenerate\T4Template\SingleTableHost\CSharp\Dynamic\DAL.tt"
foreach(SOColumn item in colList.Where(tmp=>tmp.PrimaryKey)) {
            
            #line default
            #line hidden
            this.Write("                new MySqlParameter(pn");
            
            #line 173 "E:\testcode\csharp\ToolManager\Plugn.CodeGenerate\T4Template\SingleTableHost\CSharp\Dynamic\DAL.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(item.Name));
            
            #line default
            #line hidden
            this.Write(", ");
            
            #line 173 "E:\testcode\csharp\ToolManager\Plugn.CodeGenerate\T4Template\SingleTableHost\CSharp\Dynamic\DAL.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(item.Name.FirstLower()));
            
            #line default
            #line hidden
            this.Write("),\r\n");
            
            #line 174 "E:\testcode\csharp\ToolManager\Plugn.CodeGenerate\T4Template\SingleTableHost\CSharp\Dynamic\DAL.tt"
}
            
            #line default
            #line hidden
            this.Write("            };\r\n\r\n            return ExecuteNonQuery(deleteCommand, paramList);\r\n" +
                    "        }\r\n\r\n        #endregion\r\n    }\r\n}\r\n");
            return this.GenerationEnvironment.ToString();
        }
        private global::Microsoft.VisualStudio.TextTemplating.ITextTemplatingEngineHost hostValue;
        /// <summary>
        /// The current host for the text templating engine
        /// </summary>
        public virtual global::Microsoft.VisualStudio.TextTemplating.ITextTemplatingEngineHost Host
        {
            get
            {
                return this.hostValue;
            }
            set
            {
                this.hostValue = value;
            }
        }
    }
    
    #line default
    #line hidden
    #region Base class
    /// <summary>
    /// Base class for this transformation
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "15.0.0.0")]
    public class DALBase
    {
        #region Fields
        private global::System.Text.StringBuilder generationEnvironmentField;
        private global::System.CodeDom.Compiler.CompilerErrorCollection errorsField;
        private global::System.Collections.Generic.List<int> indentLengthsField;
        private string currentIndentField = "";
        private bool endsWithNewline;
        private global::System.Collections.Generic.IDictionary<string, object> sessionField;
        #endregion
        #region Properties
        /// <summary>
        /// The string builder that generation-time code is using to assemble generated output
        /// </summary>
        protected System.Text.StringBuilder GenerationEnvironment
        {
            get
            {
                if ((this.generationEnvironmentField == null))
                {
                    this.generationEnvironmentField = new global::System.Text.StringBuilder();
                }
                return this.generationEnvironmentField;
            }
            set
            {
                this.generationEnvironmentField = value;
            }
        }
        /// <summary>
        /// The error collection for the generation process
        /// </summary>
        public System.CodeDom.Compiler.CompilerErrorCollection Errors
        {
            get
            {
                if ((this.errorsField == null))
                {
                    this.errorsField = new global::System.CodeDom.Compiler.CompilerErrorCollection();
                }
                return this.errorsField;
            }
        }
        /// <summary>
        /// A list of the lengths of each indent that was added with PushIndent
        /// </summary>
        private System.Collections.Generic.List<int> indentLengths
        {
            get
            {
                if ((this.indentLengthsField == null))
                {
                    this.indentLengthsField = new global::System.Collections.Generic.List<int>();
                }
                return this.indentLengthsField;
            }
        }
        /// <summary>
        /// Gets the current indent we use when adding lines to the output
        /// </summary>
        public string CurrentIndent
        {
            get
            {
                return this.currentIndentField;
            }
        }
        /// <summary>
        /// Current transformation session
        /// </summary>
        public virtual global::System.Collections.Generic.IDictionary<string, object> Session
        {
            get
            {
                return this.sessionField;
            }
            set
            {
                this.sessionField = value;
            }
        }
        #endregion
        #region Transform-time helpers
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void Write(string textToAppend)
        {
            if (string.IsNullOrEmpty(textToAppend))
            {
                return;
            }
            // If we're starting off, or if the previous text ended with a newline,
            // we have to append the current indent first.
            if (((this.GenerationEnvironment.Length == 0) 
                        || this.endsWithNewline))
            {
                this.GenerationEnvironment.Append(this.currentIndentField);
                this.endsWithNewline = false;
            }
            // Check if the current text ends with a newline
            if (textToAppend.EndsWith(global::System.Environment.NewLine, global::System.StringComparison.CurrentCulture))
            {
                this.endsWithNewline = true;
            }
            // This is an optimization. If the current indent is "", then we don't have to do any
            // of the more complex stuff further down.
            if ((this.currentIndentField.Length == 0))
            {
                this.GenerationEnvironment.Append(textToAppend);
                return;
            }
            // Everywhere there is a newline in the text, add an indent after it
            textToAppend = textToAppend.Replace(global::System.Environment.NewLine, (global::System.Environment.NewLine + this.currentIndentField));
            // If the text ends with a newline, then we should strip off the indent added at the very end
            // because the appropriate indent will be added when the next time Write() is called
            if (this.endsWithNewline)
            {
                this.GenerationEnvironment.Append(textToAppend, 0, (textToAppend.Length - this.currentIndentField.Length));
            }
            else
            {
                this.GenerationEnvironment.Append(textToAppend);
            }
        }
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void WriteLine(string textToAppend)
        {
            this.Write(textToAppend);
            this.GenerationEnvironment.AppendLine();
            this.endsWithNewline = true;
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void Write(string format, params object[] args)
        {
            this.Write(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void WriteLine(string format, params object[] args)
        {
            this.WriteLine(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Raise an error
        /// </summary>
        public void Error(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Raise a warning
        /// </summary>
        public void Warning(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            error.IsWarning = true;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Increase the indent
        /// </summary>
        public void PushIndent(string indent)
        {
            if ((indent == null))
            {
                throw new global::System.ArgumentNullException("indent");
            }
            this.currentIndentField = (this.currentIndentField + indent);
            this.indentLengths.Add(indent.Length);
        }
        /// <summary>
        /// Remove the last indent that was added with PushIndent
        /// </summary>
        public string PopIndent()
        {
            string returnValue = "";
            if ((this.indentLengths.Count > 0))
            {
                int indentLength = this.indentLengths[(this.indentLengths.Count - 1)];
                this.indentLengths.RemoveAt((this.indentLengths.Count - 1));
                if ((indentLength > 0))
                {
                    returnValue = this.currentIndentField.Substring((this.currentIndentField.Length - indentLength));
                    this.currentIndentField = this.currentIndentField.Remove((this.currentIndentField.Length - indentLength));
                }
            }
            return returnValue;
        }
        /// <summary>
        /// Remove any indentation
        /// </summary>
        public void ClearIndent()
        {
            this.indentLengths.Clear();
            this.currentIndentField = "";
        }
        #endregion
        #region ToString Helpers
        /// <summary>
        /// Utility class to produce culture-oriented representation of an object as a string.
        /// </summary>
        public class ToStringInstanceHelper
        {
            private System.IFormatProvider formatProviderField  = global::System.Globalization.CultureInfo.InvariantCulture;
            /// <summary>
            /// Gets or sets format provider to be used by ToStringWithCulture method.
            /// </summary>
            public System.IFormatProvider FormatProvider
            {
                get
                {
                    return this.formatProviderField ;
                }
                set
                {
                    if ((value != null))
                    {
                        this.formatProviderField  = value;
                    }
                }
            }
            /// <summary>
            /// This is called from the compile/run appdomain to convert objects within an expression block to a string
            /// </summary>
            public string ToStringWithCulture(object objectToConvert)
            {
                if ((objectToConvert == null))
                {
                    throw new global::System.ArgumentNullException("objectToConvert");
                }
                System.Type t = objectToConvert.GetType();
                System.Reflection.MethodInfo method = t.GetMethod("ToString", new System.Type[] {
                            typeof(System.IFormatProvider)});
                if ((method == null))
                {
                    return objectToConvert.ToString();
                }
                else
                {
                    return ((string)(method.Invoke(objectToConvert, new object[] {
                                this.formatProviderField })));
                }
            }
        }
        private ToStringInstanceHelper toStringHelperField = new ToStringInstanceHelper();
        /// <summary>
        /// Helper to produce culture-oriented representation of an object as a string
        /// </summary>
        public ToStringInstanceHelper ToStringHelper
        {
            get
            {
                return this.toStringHelperField;
            }
        }
        #endregion
    }
    #endregion
}
